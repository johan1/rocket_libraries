#ifndef _TUPLE_TYPING_H_
#define _TUPLE_TYPING_H_

#include "OperatorDefault.h"
#include <tuple>

// Macro selector
#define GET_DEFINE_TUPLE_WRAPPER_MACRO(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,NAME,...) NAME
#define DEFINE_TUPLE_WRAPPER(...) GET_DEFINE_TUPLE_WRAPPER_MACRO(__VA_ARGS__,\
    DEFINE_TUPLE_WRAPPER10, DEFINE_TUPLE_WRAPPER10,\
    DEFINE_TUPLE_WRAPPER9, DEFINE_TUPLE_WRAPPER9,\
    DEFINE_TUPLE_WRAPPER8, DEFINE_TUPLE_WRAPPER8,\
    DEFINE_TUPLE_WRAPPER7, DEFINE_TUPLE_WRAPPER7,\
    DEFINE_TUPLE_WRAPPER6, DEFINE_TUPLE_WRAPPER6,\
    DEFINE_TUPLE_WRAPPER5, DEFINE_TUPLE_WRAPPER5,\
    DEFINE_TUPLE_WRAPPER4, DEFINE_TUPLE_WRAPPER4,\
    DEFINE_TUPLE_WRAPPER3, DEFINE_TUPLE_WRAPPER3,\
    DEFINE_TUPLE_WRAPPER2, DEFINE_TUPLE_WRAPPER2, DEFINE_TUPLE_WRAPPER2, DEFINE_TUPLE_WRAPPER2, DEFINE_TUPLE_WRAPPER2)(__VA_ARGS__)

// Inner accessor stuff in DEFINE_TUPLE_WRAPPER
#define IMPL_TUPLE_WRAPPER(INDEX, KEY, VALUE_TYPE)\
    VALUE_TYPE& KEY() { return std::get<INDEX>(*this); }\
    VALUE_TYPE const& KEY() const { return std::get<INDEX>(*this); }

// TODO: Add braced list initializer constructor and assignment.
// Regular + TotallyOrdered stuff in DEFINE_TUPLE_WRAPPER
#define IMPL_TUPLE_WRAPPER_TYPE(NAME) \
    NAME() = default;\
    NAME(inherit_type const& values) : inherit_type(values) {}\
    NAME(inherit_type && values) : inherit_type(std::move(values)) {}\
    NAME(NAME const&) = default;\
    NAME(NAME &&) = default;\
	NAME& operator=(NAME const&) = default;\
	NAME& operator=(NAME &&) = default;\
    ~NAME() = default;\
\
    friend bool operator==(NAME const& tw1, NAME const& tw2) {\
    return operator==(static_cast<inherit_type const&>(tw1),\
            static_cast<inherit_type const&>(tw2));\
    }\
\
    friend bool operator<(NAME const& tw1, NAME const& tw2) {\
    return operator<(static_cast<inherit_type const&>(tw1),\
            static_cast<inherit_type const&>(tw2));\
    }

// Tuple wrapper definition macros...
#define DEFINE_TUPLE_WRAPPER2(NAME, PARAM1_KEY, PARAM1_VALUE_TYPE, PARAM2_KEY, PARAM2_VALUE_TYPE)\
struct NAME : public std::tuple<PARAM1_VALUE_TYPE, PARAM2_VALUE_TYPE> {\
    typedef std::tuple<PARAM1_VALUE_TYPE, PARAM2_VALUE_TYPE> inherit_type;\
\
    IMPL_TUPLE_WRAPPER_TYPE(NAME) \
\
    IMPL_TUPLE_WRAPPER(0, PARAM1_KEY, PARAM1_VALUE_TYPE) \
    IMPL_TUPLE_WRAPPER(1, PARAM2_KEY, PARAM2_VALUE_TYPE) \
}

#define DEFINE_TUPLE_WRAPPER3(NAME,\
        PARAM1_KEY, PARAM1_VALUE_TYPE,\
        PARAM2_KEY, PARAM2_VALUE_TYPE,\
        PARAM3_KEY, PARAM3_VALUE_TYPE)\
struct NAME : public std::tuple<PARAM1_VALUE_TYPE, PARAM2_VALUE_TYPE, PARAM3_VALUE_TYPE> {\
    typedef std::tuple<PARAM1_VALUE_TYPE, PARAM2_VALUE_TYPE, PARAM3_VALUE_TYPE> inherit_type;\
\
    IMPL_TUPLE_WRAPPER_TYPE(NAME) \
\
    IMPL_TUPLE_WRAPPER(0, PARAM1_KEY, PARAM1_VALUE_TYPE) \
    IMPL_TUPLE_WRAPPER(1, PARAM2_KEY, PARAM2_VALUE_TYPE) \
    IMPL_TUPLE_WRAPPER(2, PARAM3_KEY, PARAM3_VALUE_TYPE) \
}

#define DEFINE_TUPLE_WRAPPER4(NAME,\
        PARAM1_KEY, PARAM1_VALUE_TYPE,\
        PARAM2_KEY, PARAM2_VALUE_TYPE,\
        PARAM3_KEY, PARAM3_VALUE_TYPE,\
        PARAM4_KEY, PARAM4_VALUE_TYPE)\
struct NAME : public std::tuple<PARAM1_VALUE_TYPE, PARAM2_VALUE_TYPE, PARAM3_VALUE_TYPE, PARAM4_VALUE_TYPE> {\
    typedef std::tuple<PARAM1_VALUE_TYPE, PARAM2_VALUE_TYPE, PARAM3_VALUE_TYPE, PARAM4_VALUE_TYPE> inherit_type;\
\
    IMPL_TUPLE_WRAPPER_TYPE(NAME) \
\
    IMPL_TUPLE_WRAPPER(0, PARAM1_KEY, PARAM1_VALUE_TYPE) \
    IMPL_TUPLE_WRAPPER(1, PARAM2_KEY, PARAM2_VALUE_TYPE) \
    IMPL_TUPLE_WRAPPER(2, PARAM3_KEY, PARAM3_VALUE_TYPE) \
    IMPL_TUPLE_WRAPPER(3, PARAM4_KEY, PARAM4_VALUE_TYPE) \
}

#define DEFINE_TUPLE_WRAPPER5(NAME,\
        PARAM1_KEY, PARAM1_VALUE_TYPE,\
        PARAM2_KEY, PARAM2_VALUE_TYPE,\
        PARAM3_KEY, PARAM3_VALUE_TYPE,\
        PARAM4_KEY, PARAM4_VALUE_TYPE,\
        PARAM5_KEY, PARAM5_VALUE_TYPE)\
struct NAME : public std::tuple<PARAM1_VALUE_TYPE, PARAM2_VALUE_TYPE, PARAM3_VALUE_TYPE, PARAM4_VALUE_TYPE, PARAM5_VALUE_TYPE> {\
    typedef std::tuple<PARAM1_VALUE_TYPE, PARAM2_VALUE_TYPE, PARAM3_VALUE_TYPE, PARAM4_VALUE_TYPE, PARAM5_VALUE_TYPE> inherit_type;\
\
    IMPL_TUPLE_WRAPPER_TYPE(NAME) \
\
    IMPL_TUPLE_WRAPPER(0, PARAM1_KEY, PARAM1_VALUE_TYPE) \
    IMPL_TUPLE_WRAPPER(1, PARAM2_KEY, PARAM2_VALUE_TYPE) \
    IMPL_TUPLE_WRAPPER(2, PARAM3_KEY, PARAM3_VALUE_TYPE) \
    IMPL_TUPLE_WRAPPER(3, PARAM4_KEY, PARAM4_VALUE_TYPE) \
    IMPL_TUPLE_WRAPPER(4, PARAM5_KEY, PARAM5_VALUE_TYPE) \
}

#define DEFINE_TUPLE_WRAPPER6(NAME,\
        PARAM1_KEY, PARAM1_VALUE_TYPE,\
        PARAM2_KEY, PARAM2_VALUE_TYPE,\
        PARAM3_KEY, PARAM3_VALUE_TYPE,\
        PARAM4_KEY, PARAM4_VALUE_TYPE,\
        PARAM5_KEY, PARAM5_VALUE_TYPE,\
        PARAM6_KEY, PARAM6_VALUE_TYPE)\
struct NAME : public std::tuple<PARAM1_VALUE_TYPE, PARAM2_VALUE_TYPE, PARAM3_VALUE_TYPE, PARAM4_VALUE_TYPE, PARAM5_VALUE_TYPE, PARAM6_VALUE_TYPE> {\
    typedef std::tuple<PARAM1_VALUE_TYPE, PARAM2_VALUE_TYPE, PARAM3_VALUE_TYPE, PARAM4_VALUE_TYPE, PARAM5_VALUE_TYPE, PARAM6_VALUE_TYPE> inherit_type;\
\
    IMPL_TUPLE_WRAPPER_TYPE(NAME) \
\
    IMPL_TUPLE_WRAPPER(0, PARAM1_KEY, PARAM1_VALUE_TYPE) \
    IMPL_TUPLE_WRAPPER(1, PARAM2_KEY, PARAM2_VALUE_TYPE) \
    IMPL_TUPLE_WRAPPER(2, PARAM3_KEY, PARAM3_VALUE_TYPE) \
    IMPL_TUPLE_WRAPPER(3, PARAM4_KEY, PARAM4_VALUE_TYPE) \
    IMPL_TUPLE_WRAPPER(4, PARAM5_KEY, PARAM5_VALUE_TYPE) \
    IMPL_TUPLE_WRAPPER(5, PARAM6_KEY, PARAM6_VALUE_TYPE) \
}

#define DEFINE_TUPLE_WRAPPER7(NAME,\
        PARAM1_KEY, PARAM1_VALUE_TYPE,\
        PARAM2_KEY, PARAM2_VALUE_TYPE,\
        PARAM3_KEY, PARAM3_VALUE_TYPE,\
        PARAM4_KEY, PARAM4_VALUE_TYPE,\
        PARAM5_KEY, PARAM5_VALUE_TYPE,\
        PARAM6_KEY, PARAM6_VALUE_TYPE,\
        PARAM7_KEY, PARAM7_VALUE_TYPE)\
struct NAME : public std::tuple<PARAM1_VALUE_TYPE, PARAM2_VALUE_TYPE, PARAM3_VALUE_TYPE, PARAM4_VALUE_TYPE, PARAM5_VALUE_TYPE, PARAM6_VALUE_TYPE, PARAM7_VALUE_TYPE> {\
    typedef std::tuple<PARAM1_VALUE_TYPE, PARAM2_VALUE_TYPE, PARAM3_VALUE_TYPE, PARAM4_VALUE_TYPE, PARAM5_VALUE_TYPE, PARAM6_VALUE_TYPE, PARAM7_VALUE_TYPE> inherit_type;\
\
    IMPL_TUPLE_WRAPPER_TYPE(NAME) \
\
    IMPL_TUPLE_WRAPPER(0, PARAM1_KEY, PARAM1_VALUE_TYPE) \
    IMPL_TUPLE_WRAPPER(1, PARAM2_KEY, PARAM2_VALUE_TYPE) \
    IMPL_TUPLE_WRAPPER(2, PARAM3_KEY, PARAM3_VALUE_TYPE) \
    IMPL_TUPLE_WRAPPER(3, PARAM4_KEY, PARAM4_VALUE_TYPE) \
    IMPL_TUPLE_WRAPPER(4, PARAM5_KEY, PARAM5_VALUE_TYPE) \
    IMPL_TUPLE_WRAPPER(5, PARAM6_KEY, PARAM6_VALUE_TYPE) \
    IMPL_TUPLE_WRAPPER(6, PARAM7_KEY, PARAM7_VALUE_TYPE) \
}

#define DEFINE_TUPLE_WRAPPER8(NAME,\
        PARAM1_KEY, PARAM1_VALUE_TYPE,\
        PARAM2_KEY, PARAM2_VALUE_TYPE,\
        PARAM3_KEY, PARAM3_VALUE_TYPE,\
        PARAM4_KEY, PARAM4_VALUE_TYPE,\
        PARAM5_KEY, PARAM5_VALUE_TYPE,\
        PARAM6_KEY, PARAM6_VALUE_TYPE,\
        PARAM7_KEY, PARAM7_VALUE_TYPE,\
        PARAM8_KEY, PARAM8_VALUE_TYPE)\
struct NAME : public std::tuple<PARAM1_VALUE_TYPE, PARAM2_VALUE_TYPE, PARAM3_VALUE_TYPE, PARAM4_VALUE_TYPE, PARAM5_VALUE_TYPE, PARAM6_VALUE_TYPE, PARAM7_VALUE_TYPE, PARAM8_VALUE_TYPE> {\
    typedef std::tuple<PARAM1_VALUE_TYPE, PARAM2_VALUE_TYPE, PARAM3_VALUE_TYPE, PARAM4_VALUE_TYPE, PARAM5_VALUE_TYPE, PARAM6_VALUE_TYPE, PARAM7_VALUE_TYPE, PARAM8_VALUE_TYPE> inherit_type;\
\
    IMPL_TUPLE_WRAPPER_TYPE(NAME) \
\
    IMPL_TUPLE_WRAPPER(0, PARAM1_KEY, PARAM1_VALUE_TYPE) \
    IMPL_TUPLE_WRAPPER(1, PARAM2_KEY, PARAM2_VALUE_TYPE) \
    IMPL_TUPLE_WRAPPER(2, PARAM3_KEY, PARAM3_VALUE_TYPE) \
    IMPL_TUPLE_WRAPPER(3, PARAM4_KEY, PARAM4_VALUE_TYPE) \
    IMPL_TUPLE_WRAPPER(4, PARAM5_KEY, PARAM5_VALUE_TYPE) \
    IMPL_TUPLE_WRAPPER(5, PARAM6_KEY, PARAM6_VALUE_TYPE) \
    IMPL_TUPLE_WRAPPER(6, PARAM7_KEY, PARAM7_VALUE_TYPE) \
    IMPL_TUPLE_WRAPPER(7, PARAM8_KEY, PARAM8_VALUE_TYPE) \
}

#define DEFINE_TUPLE_WRAPPER9(NAME,\
        PARAM1_KEY, PARAM1_VALUE_TYPE,\
        PARAM2_KEY, PARAM2_VALUE_TYPE,\
        PARAM3_KEY, PARAM3_VALUE_TYPE,\
        PARAM4_KEY, PARAM4_VALUE_TYPE,\
        PARAM5_KEY, PARAM5_VALUE_TYPE,\
        PARAM6_KEY, PARAM6_VALUE_TYPE,\
        PARAM7_KEY, PARAM7_VALUE_TYPE,\
        PARAM8_KEY, PARAM8_VALUE_TYPE,\
        PARAM9_KEY, PARAM9_VALUE_TYPE)\
struct NAME : public std::tuple<PARAM1_VALUE_TYPE, PARAM2_VALUE_TYPE, PARAM3_VALUE_TYPE, PARAM4_VALUE_TYPE, PARAM5_VALUE_TYPE, PARAM6_VALUE_TYPE, PARAM7_VALUE_TYPE, PARAM8_VALUE_TYPE, PARAM9_VALUE_TYPE> {\
    typedef std::tuple<PARAM1_VALUE_TYPE, PARAM2_VALUE_TYPE, PARAM3_VALUE_TYPE, PARAM4_VALUE_TYPE, PARAM5_VALUE_TYPE, PARAM6_VALUE_TYPE, PARAM7_VALUE_TYPE, PARAM8_VALUE_TYPE, PARAM9_VALUE_TYPE> inherit_type;\
\
    IMPL_TUPLE_WRAPPER_TYPE(NAME) \
\
    IMPL_TUPLE_WRAPPER(0, PARAM1_KEY, PARAM1_VALUE_TYPE) \
    IMPL_TUPLE_WRAPPER(1, PARAM2_KEY, PARAM2_VALUE_TYPE) \
    IMPL_TUPLE_WRAPPER(2, PARAM3_KEY, PARAM3_VALUE_TYPE) \
    IMPL_TUPLE_WRAPPER(3, PARAM4_KEY, PARAM4_VALUE_TYPE) \
    IMPL_TUPLE_WRAPPER(4, PARAM5_KEY, PARAM5_VALUE_TYPE) \
    IMPL_TUPLE_WRAPPER(5, PARAM6_KEY, PARAM6_VALUE_TYPE) \
    IMPL_TUPLE_WRAPPER(6, PARAM7_KEY, PARAM7_VALUE_TYPE) \
    IMPL_TUPLE_WRAPPER(7, PARAM8_KEY, PARAM8_VALUE_TYPE) \
    IMPL_TUPLE_WRAPPER(8, PARAM9_KEY, PARAM9_VALUE_TYPE) \
}

#define DEFINE_TUPLE_WRAPPER10(NAME,\
        PARAM1_KEY, PARAM1_VALUE_TYPE,\
        PARAM2_KEY, PARAM2_VALUE_TYPE,\
        PARAM3_KEY, PARAM3_VALUE_TYPE,\
        PARAM4_KEY, PARAM4_VALUE_TYPE,\
        PARAM5_KEY, PARAM5_VALUE_TYPE,\
        PARAM6_KEY, PARAM6_VALUE_TYPE,\
        PARAM7_KEY, PARAM7_VALUE_TYPE,\
        PARAM8_KEY, PARAM8_VALUE_TYPE,\
        PARAM9_KEY, PARAM9_VALUE_TYPE,\
        PARAM10_KEY, PARAM10_VALUE_TYPE)\
struct NAME : public std::tuple<PARAM1_VALUE_TYPE, PARAM2_VALUE_TYPE, PARAM3_VALUE_TYPE, PARAM4_VALUE_TYPE, PARAM5_VALUE_TYPE, PARAM6_VALUE_TYPE, PARAM7_VALUE_TYPE, PARAM8_VALUE_TYPE, PARAM9_VALUE_TYPE, PARAM10_VALUE_TYPE> {\
    typedef std::tuple<PARAM1_VALUE_TYPE, PARAM2_VALUE_TYPE, PARAM3_VALUE_TYPE, PARAM4_VALUE_TYPE, PARAM5_VALUE_TYPE, PARAM6_VALUE_TYPE, PARAM7_VALUE_TYPE, PARAM8_VALUE_TYPE, PARAM9_VALUE_TYPE, PARAM10_VALUE_TYPE> inherit_type;\
\
    IMPL_TUPLE_WRAPPER_TYPE(NAME) \
\
    IMPL_TUPLE_WRAPPER(0, PARAM1_KEY, PARAM1_VALUE_TYPE) \
    IMPL_TUPLE_WRAPPER(1, PARAM2_KEY, PARAM2_VALUE_TYPE) \
    IMPL_TUPLE_WRAPPER(2, PARAM3_KEY, PARAM3_VALUE_TYPE) \
    IMPL_TUPLE_WRAPPER(3, PARAM4_KEY, PARAM4_VALUE_TYPE) \
    IMPL_TUPLE_WRAPPER(4, PARAM5_KEY, PARAM5_VALUE_TYPE) \
    IMPL_TUPLE_WRAPPER(5, PARAM6_KEY, PARAM6_VALUE_TYPE) \
    IMPL_TUPLE_WRAPPER(6, PARAM7_KEY, PARAM7_VALUE_TYPE) \
    IMPL_TUPLE_WRAPPER(7, PARAM8_KEY, PARAM8_VALUE_TYPE) \
    IMPL_TUPLE_WRAPPER(8, PARAM9_KEY, PARAM9_VALUE_TYPE) \
    IMPL_TUPLE_WRAPPER(9, PARAM10_KEY, PARAM10_VALUE_TYPE) \
}

#endif
